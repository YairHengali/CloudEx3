name: assignment3 #NEED TO ADD THE LOG.TXT FILE AND QUERY
on:
  push
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: print current time and names to log.txt
      run: |
        date -Iminutes >> log.txt
        echo Yair Hengali >> log.txt
        echo Ofir Nakdai >> log.txt
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        tags: mealssvr:latest #, ${{ secrets.DOCKER_COURSE_USERNAME }}/mealssvr:latest
        outputs: type=docker,dest=/tmp/image.tar
    - name: update log if image built
      if: success()
      run:  echo "image successfully built" >> log.txt
    - name: update log if image not able to built
      if: failure()
      run:  echo "image not able to be built" >> log.txt
    - name: upload log file
      uses: actions/upload-artifact@v3
      with:
        name: GH_log_file
        path: ./log.txt
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: mealssvr
        path: /tmp/image.tar

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
#    1. download image and run it in a container
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download artifact
      uses: actions/download-artifact@v3  # downloads all artifacts
    - name: Load Docker images from previous workflows
      run: docker load --input mealssvr/image.tar
    - name: check mealssvr image is loaded
      run: docker image ls
    - name: run image in container
      run: docker run -p8000:8000 mealssvr &
    - name: Check container is running
      run: |
        if docker ps | grep -q "mealssvr"; then
          echo "Container up and running" >> GH_log_file/log.txt
        else
          echo "Container failed to run" >> GH_log_file/log.txt
        fi
#     2. set up python and pytest environments
    - name: Set up Python
      uses: actions/setup-python@v4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest # not using yet lint checker like ruff
        pip install requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      3. run pytest tests and check results
    - name: Test with pytest  # additionally use ruff or other lint checkers
      run: |
        cd tests
        pytest -v assn3_tests.py > assn3_test_results.txt
    - name: upload test results
      if: always()  # always perform this step even if tests fail, to see results
      uses: actions/upload-artifact@v3
      with:
        name: GH_test_results
        path: tests/assn3_test_results.txt
    
    - name: testy
      run: ls
        
    - name: Upload updated log file
      uses: actions/upload-artifact@v3
      with:
        name: GH_log_file
        path:  GH_log_file/log.txt
        
# #     The following steps will only execute if tests succeeded
#     - name: Set DATE
#       run: echo "DATE=$(date -I)" >> $GITHUB_ENV
#     - name: Log in to Docker Hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKER_COURSE_USERNAME }}
#         password: ${{ secrets.DOCKER_COURSE_PASSWORD }}
#     - name: push image with "latest" and date tags to DH
#       run: |
#         docker push ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2
#         docker tag ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2 \
#         ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}
#         docker push \
#         ${{ secrets.DOCKER_COURSE_USERNAME }}/wordsvr-v2:${{ env.DATE }}

#  query:
